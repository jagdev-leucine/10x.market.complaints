package dao;


import model.EvaluationDecisions;
import utils.DatabaseUtility;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.Statement;
import model.Complaint;
import java.util.ArrayList;
import java.util.List;


public class EvaluationDecisionsDAO {

	
	/**
	 * Adds a new complaint record to the database.
	 *
	 * @param complaint The Complaint object to be added to the database.
	 */
	public void createComplaint(Complaint complaint) {
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    String sql = "INSERT INTO complaints (complaint_id, complainant_name, contact_email, contact_phone, product_name, batch_number, complaint_description, complaint_status, submission_date, resolution_date, fk_product_information_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	    try {
	        conn = DatabaseUtility.connect();
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, complaint.getComplaintId());
	        pstmt.setString(2, complaint.getComplainantName());
	        pstmt.setString(3, complaint.getContactEmail());
	        pstmt.setString(4, complaint.getContactPhone());
	        pstmt.setString(5, complaint.getProductName());
	        pstmt.setString(6, complaint.getBatchNumber());
	        pstmt.setString(7, complaint.getComplaintDescription());
	        pstmt.setString(8, complaint.getComplaintStatus());
	        pstmt.setDate(9, new java.sql.Date(complaint.getSubmissionDate().getTime()));
	        pstmt.setDate(10, complaint.getResolutionDate() != null ? new java.sql.Date(complaint.getResolutionDate().getTime()) : null);
	        pstmt.setLong(11, complaint.getFkProductInformationId());
	        pstmt.executeUpdate();
	    } catch (SQLException ex) {
	        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	    } finally {
	        DatabaseUtility.disconnect(conn);
	        if (pstmt != null) {
	            try {
	                pstmt.close();
	            } catch (SQLException e) {
	                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
	            }
	        }
	    }
	}
	
	/**
	 * Retrieves a single complaint record from the database based on its ID.
	 *
	 * @param id The unique identifier of the complaint to retrieve.
	 * @return A Complaint object if found, or null if no complaint with the given ID exists.
	 */
	public Complaint getComplaintById(int id) {
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    Complaint complaint = null;
	    try {
	        conn = DatabaseUtility.connect();
	        String sql = "SELECT * FROM complaints WHERE id = ?";
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setInt(1, id);
	        rs = pstmt.executeQuery();
	        if (rs.next()) {
	            complaint = new Complaint();
	            complaint.setId(rs.getInt("id"));
	            complaint.setComplaintId(rs.getString("complaint_id"));
	            complaint.setComplainantName(rs.getString("complainant_name"));
	            complaint.setContactEmail(rs.getString("contact_email"));
	            complaint.setContactPhone(rs.getString("contact_phone"));
	            complaint.setProductName(rs.getString("product_name"));
	            complaint.setBatchNumber(rs.getString("batch_number"));
	            complaint.setComplaintDescription(rs.getString("complaint_description"));
	            complaint.setComplaintStatus(rs.getString("complaint_status"));
	            complaint.setSubmissionDate(rs.getDate("submission_date"));
	            complaint.setResolutionDate(rs.getDate("resolution_date"));
	        }
	    } catch (SQLException ex) {
	        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	    } finally {
	        DatabaseUtility.disconnect(conn);
	        if (pstmt != null) {
	            try { pstmt.close(); } catch (SQLException e) { /* Ignored */ }
	        }
	        if (rs != null) {
	            try { rs.close(); } catch (SQLException e) { /* Ignored */ }
	        }
	    }
	    return complaint;
	}
	
	/**
	 * Fetches all complaint records from the database.
	 * @return A list of Complaint objects.
	 */
	public List<Complaint> getAllComplaints() {
	    List<Complaint> complaints = new ArrayList<>();
	    String sql = "SELECT * FROM complaints";
	    try (Connection conn = DatabaseUtility.connect();
	         Statement stmt = conn.createStatement();
	         ResultSet rs = stmt.executeQuery(sql)) {
	
	        while (rs.next()) {
	            Complaint complaint = new Complaint();
	            complaint.setId(rs.getLong("id"));
	            complaint.setComplaintId(rs.getString("complaint_id"));
	            complaint.setComplainantName(rs.getString("complainant_name"));
	            complaint.setContactEmail(rs.getString("contact_email"));
	            complaint.setContactPhone(rs.getString("contact_phone"));
	            complaint.setProductName(rs.getString("product_name"));
	            complaint.setBatchNumber(rs.getString("batch_number"));
	            complaint.setComplaintDescription(rs.getString("complaint_description"));
	            complaint.setComplaintStatus(rs.getString("complaint_status"));
	            complaint.setSubmissionDate(rs.getDate("submission_date"));
	            complaint.setResolutionDate(rs.getDate("resolution_date"));
	            // Set additional fields here
	            complaints.add(complaint);
	        }
	    } catch (SQLException ex) {
	        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	    } finally {
	        DatabaseUtility.disconnect();
	    }
	    return complaints;
	}
	
	/**
	 * Updates an existing complaint record in the database.
	 *
	 * @param complaint The updated Complaint object to be saved in the database.
	 */
	public void updateComplaint(Complaint complaint) {
	    Connection conn = null;
	    try {
	        conn = DatabaseUtility.connect();
	        String sql = "UPDATE complaints SET complainant_name = ?, contact_email = ?, contact_phone = ?, product_name = ?, batch_number = ?, complaint_description = ?, complaint_status = ?, submission_date = ?, resolution_date = ? WHERE id = ?;";
	
	        PreparedStatement pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, complaint.getComplainantName());
	        pstmt.setString(2, complaint.getContactEmail());
	        pstmt.setString(3, complaint.getContactPhone());
	        pstmt.setString(4, complaint.getProductName());
	        pstmt.setString(5, complaint.getBatchNumber());
	        pstmt.setString(6, complaint.getComplaintDescription());
	        pstmt.setString(7, complaint.getComplaintStatus());
	        pstmt.setDate(8, new java.sql.Date(complaint.getSubmissionDate().getTime()));
	        if (complaint.getResolutionDate() != null) {
	            pstmt.setDate(9, new java.sql.Date(complaint.getResolutionDate().getTime()));
	        } else {
	            pstmt.setNull(9, java.sql.Types.DATE);
	        }
	        pstmt.setLong(10, complaint.getId());
	
	        int updated = pstmt.executeUpdate();
	        if (updated > 0) {
	            System.out.println("Complaint updated successfully.");
	        }
	    } catch (SQLException ex) {
	        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	    } finally {
	        DatabaseUtility.disconnect(conn);
	    }
	}
	
	/**
	* Deletes a complaint record from the database based on its ID.
	* @param id The unique identifier of the complaint to be deleted.
	*/
	public boolean deleteComplaintById(long id) {
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    boolean isDeleted = false;
	    String sql = "DELETE FROM complaints WHERE id = ?;";
	    try {
	        conn = DatabaseUtility.connect();
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setLong(1, id);
	        int rowsAffected = pstmt.executeUpdate();
	        isDeleted = rowsAffected > 0;
	    } catch (SQLException ex) {
	        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	    } finally {
	        DatabaseUtility.disconnect(conn);
	        if (pstmt != null) {
	            try {
	                pstmt.close();
	            } catch (SQLException ex) {
	                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	            }
	        }
	    }
	    return isDeleted;
	}
	
	
	/**
	 * Fetches complaints from the database that match a specific status.
	 *
	 * @param status The status used to filter complaint records.
	 * @return A list of complaints matching the specified status.
	 */
	public List<Complaint> getComplaintsByStatus(String status) {
	  List<Complaint> complaints = new ArrayList<>();
	  Connection conn = null;
	  PreparedStatement stmt = null;
	  ResultSet rs = null;
	  final String QUERY = "SELECT * FROM complaints WHERE complaint_status = ?";
	
	  try {
	    conn = DatabaseUtility.connect();
	    stmt = conn.prepareStatement(QUERY);
	    stmt.setString(1, status);
	    rs = stmt.executeQuery();
	
	    while (rs.next()) {
	      Complaint complaint = new Complaint();
	      complaint.setId(rs.getLong("id"));
	      complaint.setComplaintId(rs.getString("complaint_id"));
	      complaint.setComplainantName(rs.getString("complainant_name"));
	      complaint.setContactEmail(rs.getString("contact_email"));
	      complaint.setContactPhone(rs.getString("contact_phone"));
	      complaint.setProductName(rs.getString("product_name"));
	      complaint.setBatchNumber(rs.getString("batch_number"));
	      complaint.setComplaintDescription(rs.getString("complaint_description"));
	      complaint.setComplaintStatus(rs.getString("complaint_status"));
	      complaint.setSubmissionDate(rs.getDate("submission_date"));
	      complaint.setResolutionDate(rs.getDate("resolution_date"));
	      // Set more fields as necessary
	      complaints.add(complaint);
	    }
	  } catch (SQLException ex) {
	    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
	  } finally {
	    DatabaseUtility.disconnect(conn);
	    if (stmt != null) { try { stmt.close(); } catch (SQLException ex) { Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex); } }
	    if (rs != null) { try { rs.close(); } catch (SQLException ex) { Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex); } }
	  }
	
	  return complaints;
	}
	
}
